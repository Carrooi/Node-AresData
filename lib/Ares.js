// Generated by CoffeeScript 1.6.3
(function() {
  var Ares, Q, Url, Validators, moment, xml,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Validators = require('./Validators');

  Url = require('./Url');

  Q = require('q');

  xml = require('xml2js');

  moment = require('moment');

  Ares = (function() {
    function Ares() {
      this.prepare = __bind(this.prepare, this);
      this.parse = __bind(this.parse, this);
    }

    Ares.URL = 'http://wwwinfo.mfcr.cz/cgi-bin/ares/darv_std.cgi';

    Ares.prototype.onlyActive = true;

    Ares.prototype.encoding = 'utf';

    Ares.prototype.lastOriginalData = null;

    Ares.prototype.find = function(name, value, limit, type) {
      var options;
      if (limit == null) {
        limit = 10;
      }
      if (type == null) {
        type = 'free';
      }
      options = {
        czk: this.encoding,
        aktivni: this.onlyActive,
        max_pocet: limit,
        typ_vyhledani: type
      };
      options[name] = value;
      return this.load(options).then(this.parse).then(this.prepare);
    };

    Ares.prototype.findByIdentification = function(identification, limit) {
      if (limit == null) {
        limit = 10;
      }
      if (Validators.companyIdentification(identification) === false) {
        return Q.reject(new Error('Company identification is not valid'));
      }
      return this.find('ico', identification, limit, 'ico');
    };

    Ares.prototype.findByCompanyName = function(name, limit) {
      if (limit == null) {
        limit = 10;
      }
      return this.find('obchodni_firma', name, limit, 'of');
    };

    Ares.prototype.getUrl = function(options) {
      options = Url.buildQuery(options);
      return Ares.URL + '?' + options;
    };

    Ares.prototype.load = function(options) {
      var deferred, http, url;
      url = this.getUrl(options);
      deferred = Q.defer();
      if (typeof window === 'undefined') {
        http = require('http');
        http.get(url, function(res) {
          var data;
          data = [];
          res.setEncoding('utf8');
          res.on('data', function(chunk) {
            return data.push(chunk);
          });
          return res.on('end', function() {
            return deferred.resolve(data.join(''));
          });
        }).on('error', function(err) {
          return deferred.reject(err);
        });
      } else {
        http = require('browser-http');
        http.get(url, function(res) {
          return deferred.resolve(res.data);
        }, function(err) {
          return deferred.reject(err);
        });
      }
      return deferred.promise;
    };

    Ares.prototype.parse = function(data) {
      var deferred,
        _this = this;
      deferred = Q.defer();
      data = this.simplifyXml(data);
      xml.parseString(data, function(err, data) {
        if (err) {
          _this.lastOriginalData = null;
          return deferred.reject(err);
        } else {
          _this.lastOriginalData = data;
          return deferred.resolve(data);
        }
      });
      return deferred.promise;
    };

    Ares.prototype.prepare = function(data) {
      var item, result, _i, _len, _ref;
      data = data.Ares_odpovedi.Odpoved[0];
      if (typeof data.Error !== 'undefined') {
        return Q.reject(new Error(data.Error[0].Error_text[0]));
      }
      result = {
        length: parseInt(data.Pocet_zaznamu[0]),
        data: []
      };
      _ref = data.Zaznam;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        result.data.push(this.prepareItem(item));
      }
      return Q.resolve(result);
    };

    Ares.prototype.prepareItem = function(item) {
      var result;
      result = {
        created: moment(item.Datum_vzniku[0], 'YYYY-MM-DD').toDate(),
        validity: moment(item.Datum_platnosti[0], 'YYYY-MM-DD').toDate(),
        name: item.Obchodni_firma[0],
        identification: parseInt(item.ICO[0]),
        address: {
          district: item.Identifikace[0].Adresa_ARES[0].Nazev_okresu[0],
          city: item.Identifikace[0].Adresa_ARES[0].Nazev_obce[0],
          street: item.Identifikace[0].Adresa_ARES[0].Nazev_ulice[0],
          descriptionNumber: parseInt(item.Identifikace[0].Adresa_ARES[0].Cislo_domovni[0]),
          orientationNumber: parseInt(item.Identifikace[0].Adresa_ARES[0].Cislo_orientacni[0]),
          zipCode: parseInt(item.Identifikace[0].Adresa_ARES[0].PSC[0])
        }
      };
      return result;
    };

    Ares.prototype.simplifyXml = function(data) {
      return data.replace('<?xml version="1.0" encoding="UTF-8"?>', '').replace(/(are|dtt|udt)\:/g, '').replace(' xmlns:are="http://wwwinfo.mfcr.cz/ares/xml_doc/schemas/ares/ares_answer/v_1.0.1"', '').replace(' xmlns:dtt="http://wwwinfo.mfcr.cz/ares/xml_doc/schemas/ares/ares_datatypes/v_1.0.4"', '').replace(' xmlns:udt="http://wwwinfo.mfcr.cz/ares/xml_doc/schemas/uvis_datatypes/v_1.0.1"', '').replace(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"', '').replace(' validation_XSLT="/ares/xml_doc/schemas/ares/ares_answer/v_1.0.0/ares_answer.xsl"', '').replace(' xsi:schemaLocation="http://wwwinfo.mfcr.cz/ares/xml_doc/schemas/ares/ares_answer/v_1.0.1 http://wwwinfo.mfcr.cz/ares/xml_doc/schemas/ares/ares_answer/v_1.0.1/ares_answer_v_1.0.1.xsd"', '').replace(/^\s*/, '').replace(/\s*$/, '');
    };

    return Ares;

  })();

  module.exports = Ares;

}).call(this);
